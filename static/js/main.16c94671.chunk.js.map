{"version":3,"sources":["componentes/Formulario.js","componentes/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16c94671.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nconst Formulario = ({crearCita}) => {\r\n\r\n\r\n    // crear State de Citas \r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n    // crear State de error\r\n    const [error, actualizarError] = useState(false)\r\n\r\n    //funcion que se ejecuta cuando el usuario escribe en un input\r\n    const actualizarState = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            //leer contenido y guardarlo\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    //extraer valores\r\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n\r\n    //funcion de envio formulario\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n        // Validar\r\n\r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === ''\r\n         || hora.trim() === '' || sintomas.trim() === '' ) //trim es para eliminar espacios en blanco\r\n        {\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n        //eliminar mensaje previo\r\n        actualizarError(false);\r\n        // Asignar ID\r\n        cita.id = uuid();\r\n        // Crear Cita\r\n        crearCita(cita);\r\n        //Reiniciar el formulario\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        });\r\n \r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p>    : null}\r\n            <form\r\n                onSubmit={submitCita}\r\n\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={mascota}\r\n                />\r\n                <label>Nombre Dueño</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Dueño de la Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={propietario}\r\n                />\r\n                <label>Fecha</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={fecha}\r\n                />\r\n                <label>Hora</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={hora}\r\n\r\n                />\r\n                <label>Sintomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"\r\n                    onChange={actualizarState}\r\n                    value={sintomas}\r\n\r\n                ></textarea>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar Cita</button>\r\n\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n   <div className = \"cita\">\r\n      <p>Mascota:<span>{cita.mascota}</span></p>\r\n      <p>Dueño:<span>{cita.propietario}</span></p>\r\n      <p>Fecha:<span>{cita.fecha}</span></p>\r\n      <p>Hora:<span>{cita.hora}</span></p>\r\n      <p>Sintomas:<span>{cita.sintomas}</span></p>\r\n      <button \r\n      className=\"button eliminar u-full-width\"\r\n      onClick = {() => eliminarCita(cita.id)}\r\n      >Eliminar &times;</button>\r\n   \r\n     \r\n   </div>\r\n);\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './componentes/Formulario';\nimport Cita from './componentes/Cita';\nfunction App() {\n\n\n  //citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n\n\n  //arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //use EFFECT para realizar ciertas operaciones cuando el state cambia\n  useEffect( () => {\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas));\n    }\n    else{\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas, citasIniciales] );\n\n  // funcion para tomar listar citas y agregar nueva\n\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  }\n\n  // funcion para elimminar cita por id\n  const eliminarCita = id => {\n      const nuevasCitas = citas.filter(cita => cita.id !== id);\n      guardarCitas(nuevasCitas);\n  };\n\n  //mensaje condicional\n  const titulo = citas.length === 0 ?  'No hay citas'  : 'Administra tus Citas'\n\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n              crearCita={crearCita}\n            ></Formulario>\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            \n            {citas.map(cita => (\n              <Cita\n               key={cita.id}\n               cita={cita}\n               eliminarCita={eliminarCita}\n               >\n\n              </Cita>\n            ))}\n          </div>\n        </div>\n\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}